{"ast":null,"code":"import _slicedToArray from \"/Users/alex/Downloads/draggable-div-element-react-hook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"/Users/alex/Downloads/draggable-div-element-react-hook/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nimport \"./styles.css\";\nimport { useDrag } from \"./useDrag\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  var _this = this;\n  var _useState = useState(\"100%\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    shapes = _useState2[0],\n    setShapes = _useState2[1];\n  var positions = [];\n\n  // variable to store the total visible area of the red box\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    visibleArea = _useState4[0],\n    setVisibleArea = _useState4[1];\n\n  // an array to store the overlapping area of each draggable element\n  var _useState5 = useState([0, 0, 0, 0, 0]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    overlappingArea = _useState6[0],\n    setOverlappingArea = _useState6[1];\n  var _loop = function _loop(i) {\n    var draggableRef = useRef(null);\n    var _useDrag = useDrag({\n        ref: draggableRef,\n        id: i,\n        callBack: function callBack(e) {\n          // set the overlapping area of the draggable element, it cannot exceed 6400\n          if (e > 6400) {\n            overlappingArea[i] = 6400;\n          } else {\n            overlappingArea[i] = e;\n          }\n          console.log(overlappingArea);\n          // calculate the total overlapping area of all draggable elements\n          var totalOverlappingArea = 0;\n          for (var j = 0; j < 5; j++) {\n            totalOverlappingArea += overlappingArea[j];\n          }\n          // calculate the total visible area of the red box, but only when the total overlapping area has changed\n          setVisibleArea(calculateVisibleArea() - totalOverlappingArea);\n        }\n      }),\n      position = _useDrag.position,\n      handleMouseDown = _useDrag.handleMouseDown;\n    positions.push({\n      position: position,\n      handleMouseDown: handleMouseDown,\n      id: i,\n      ref: draggableRef\n    });\n  };\n  for (var i = 0; i < 5; i++) {\n    _loop(i);\n  }\n\n  // function to calculate the total visible area of the red box\n  var calculateVisibleArea = function calculateVisibleArea() {\n    var redBox = document.getElementById('red-box');\n    return redBox.offsetWidth * redBox.offsetHeight;\n  };\n  useEffect(function () {\n    setVisibleArea(calculateVisibleArea());\n    console.log(shapes);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [positions.map(function (pos) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"draggable\",\n        onMouseDown: pos.handleMouseDown,\n        ref: pos.ref,\n        style: {\n          top: pos.position.y,\n          left: pos.position.x,\n          borderRadius: shapes\n        }\n      }, pos.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, _this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"big-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"red-box\",\n        id: \"red-box\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"label\",\n        children: [\"Total Visible Area: \", visibleArea, \" pixels\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"3bub5LRyG8RJKZYeZrBuFJbrgE4=\", false, function () {\n  return [useDrag];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useRef","useState","useDrag","jsxDEV","_jsxDEV","App","_s","_this","_useState","_useState2","_slicedToArray","shapes","setShapes","positions","_useState3","_useState4","visibleArea","setVisibleArea","_useState5","_useState6","overlappingArea","setOverlappingArea","_loop","i","draggableRef","_useDrag","ref","id","callBack","e","console","log","totalOverlappingArea","j","calculateVisibleArea","position","handleMouseDown","push","redBox","document","getElementById","offsetWidth","offsetHeight","className","children","map","pos","onMouseDown","style","top","y","left","x","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alex/Downloads/draggable-div-element-react-hook/src/App.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport \"./styles.css\";\nimport { useDrag } from \"./useDrag\";\n\nexport default function App() {\n\n  const [shapes, setShapes] = useState(\"100%\");\n  const positions = [];\n\n  // variable to store the total visible area of the red box\n  const [visibleArea, setVisibleArea] = useState(0);\n\n  // an array to store the overlapping area of each draggable element\n  const [overlappingArea, setOverlappingArea] = useState([0, 0, 0, 0, 0]);\n\n  for (let i = 0; i < 5; i++) {\n    const draggableRef = useRef(null);\n    const { position: position, handleMouseDown: handleMouseDown } = useDrag({\n      ref: draggableRef,\n      id: i,\n      callBack: function (e) {\n        // set the overlapping area of the draggable element, it cannot exceed 6400\n        if (e > 6400) {\n          overlappingArea[i] = 6400;\n        } else {\n          overlappingArea[i] = e;\n        }\n        console.log(overlappingArea)\n        // calculate the total overlapping area of all draggable elements\n        let totalOverlappingArea = 0;\n        for (let j = 0; j < 5; j++) {\n          totalOverlappingArea += overlappingArea[j];\n        }\n        // calculate the total visible area of the red box, but only when the total overlapping area has changed\n        setVisibleArea(calculateVisibleArea() - totalOverlappingArea);\n      },\n    });\n    positions.push({ position, handleMouseDown, id: i, ref: draggableRef });\n  }\n\n  // function to calculate the total visible area of the red box\n  const calculateVisibleArea = () => {\n    const redBox = document.getElementById('red-box');\n    return redBox.offsetWidth * redBox.offsetHeight;\n  };\n\n  useEffect(() => {\n    setVisibleArea(calculateVisibleArea());\n    console.log(shapes);\n  }, []);\n\n\n  return (\n    <div className=\"App\">\n      {positions.map((pos) => (\n        <div\n          key={pos.id}\n          className=\"draggable\"\n          onMouseDown={pos.handleMouseDown}\n          ref={pos.ref}\n          style={{\n            top: pos.position.y,\n            left: pos.position.x,\n            borderRadius: shapes,\n          }}\n        >\n        </div>\n      ))}\n      <div className=\"big-container\">\n        <div\n          className=\"red-box\"\n          id=\"red-box\"\n        />\n        <div className=\"label\">\n          Total Visible Area: {visibleArea} pixels\n        </div>\n      </div>\n\n    </div >\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}